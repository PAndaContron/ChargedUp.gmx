<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_rocket</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up variables

vmi = 5;

image_speed = 0;
charge = 0;
tick = 0;
moving = false;
paused = false;
won = false;

vx = 0;
vy = 0;

xi = x;
yi = y;
angi = image_angle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update charge &amp; movement

//Pausing &amp; Unpausing
if !won &amp;&amp; keyboard_check_pressed(vk_escape) {
    if paused {
        //Unpause
        audio_sound_gain(obj_global.music, 1, 100);
        shader_reset();
    } else {
        //Pause
        audio_sound_gain(obj_global.music, 0.2, 100);
        shader_set(shd_darken);
    }
    paused = !paused;
}

//Win if goal is hit
if !won &amp;&amp; place_meeting(x, y, obj_goal) {
    audio_play_sound(snd_win, 60, false);
    won = true;
    paused = true;
    shader_set(shd_darken);
}

//Reset level if R is pressed or colliding with a sphere
if (keyboard_check_pressed(ord("R")) &amp;&amp; !paused &amp;&amp; moving) || place_meeting(x, y, obj_sphere) {
    reset_pos();
}

if !paused {
    //Handle movement
    if moving {
        x += vx;
        y += vy;
        
        var fx = 0;
        var fy = 0;
        for(var i=0; i&lt;instance_number(obj_sphere); i++) {
            var sphere = instance_find(obj_sphere, i);
            var dist = distance_to_point(sphere.x, sphere.y);
            if dist != 0 {
                var fm = 9000 * charge * sphere.charge / power(dist, 2);
                fx += fm * (x - sphere.x)/dist;
                fy += fm * (y - sphere.y)/dist;
            }
        }
        
        vx += fx/room_speed;
        vy += fy/room_speed;
    
        image_angle = darctan2(-vy, vx);
    //Adjust charge if not moving
    } else {
        var inc_speed = 0.1 + keyboard_check(vk_control)*0.9
        if (keyboard_check_pressed(vk_right) - keyboard_check_pressed(vk_left)) != 0 {
            charge += (keyboard_check_pressed(vk_right) - keyboard_check_pressed(vk_left)) * inc_speed;
            tick = 0;
        } else if tick % 5 == 0 {
            charge += (keyboard_check(vk_right) - keyboard_check(vk_left)) * inc_speed;
        }
    }
}

//Adjust color of the rocket
if charge &lt; 0 {
    image_index = 0;
} else if charge &gt; 0 {
    image_index = 1;
} else {
    image_index = 2;
}

//Start moving when space is pressed
if keyboard_check_pressed(vk_space) &amp;&amp; !moving &amp;&amp; !paused {
    vx = lengthdir_x(vmi, image_angle);
    vy = lengthdir_y(vmi, image_angle);
    moving = true;
}

//Increase tick for input
tick++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset

reset_pos();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw screens

if won {
    shader_reset();
    
    draw_set_font(fnt_title);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_color(c_white);
    draw_text(room_width * 3/16, room_height* 3/16, "LEVEL PASSED!");
    
    draw_set_font(fnt_button);
    draw_set_color(c_white);
    draw_cool_button(room_width * 11/16, room_height * 3/16, "MENU", b_menu, c_blue);
    if room_exists(room_next(room)) {
        draw_cool_button(room_width * 11/16, room_height * 5/16, "NEXT", b_next, c_blue);
    }
    
    shader_set(shd_darken);
} else if paused {
    shader_reset();
    
    draw_set_font(fnt_title);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_color(c_white);
    draw_text(room_width * 3/16, room_height* 3/16, "PAUSED");
    
    draw_set_font(fnt_button);
    draw_set_color(c_white);
    draw_cool_button(room_width * 11/16, room_height * 3/16, "MENU", b_menu, c_blue);
    draw_cool_button(room_width * 11/16, room_height * 5/16, "EXIT", b_exit, c_red);
    
    shader_set(shd_darken);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw ship with charge label

draw_self();

if(!moving) {
    draw_set_font(fnt_charge);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_color(c_white);
    draw_text(x, y - (120 * image_yscale), sign_string(charge));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
